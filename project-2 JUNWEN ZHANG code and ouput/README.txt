Synopsis

This task is to apply different machine learning methods for assessing the sentiment of tweets. There are 9 files including this file. There are 5 text files, 4 python files and one csv file. The purpose of these text files are explained as below.
train-tweets contains raw tweets for selecting features and training the model.
dev-tweets contains raw tweets for evaluate the model.
train-labels contains the label to the tweets in train-tweets file with the same tweet id 
dev-labels contains the label to the tweets in dev-tweets file with the same tweet id 
info-features contains 1000 informative features which generated by get features python file.

Code 

There are four python files. 
1.   preprocess.py 
This file is used to preprocess the train-tweets and dev-tweets file. The function of this file are:
change all the letters into lowercase
remove hashtag in the tweets
remove handle in the tweets
remove url in the tweets
remove num in the tweets
replace emoticons with words
replace punctuations with words
All the functions are included in the method named processAll and also can be called  individually and there is no output.

2.   bigram.py
This file preprocesses train-tweets file and removes stop words and stemming. And then it takes all the bigrams from the train-text and using bag of words feature selection method to train the Naive Bayes classifier. Next, it processes the dev-tweets file and evaluates the model. 
There is no input needed. And output will show the status of processing, the classifier name, accuracy, positive precision, positive recall, negative precision, negative recall, neutral precision, neutral recall.

3.    tokens.py
This file preprocesses train-tweets file and removes stop words and stemming. And then it takes all the tokens from the train-text and using bag of words feature selection method to train the Naive Bayes classifier. Next, it processes the dev-tweets file and evaluates the model. 
There is no input needed. And output will show the status of processing, the classifier name, accuracy, positive precision, positive recall, negative precision, negative recall, neutral precision, neutral recall.
The following code line will show 1000 informative features which are presented in the info-features file
classifier.show_most_informative_features(1000)

4.   num-features.py
This file get certain number of features. And then it preprocesses the train-tweets file and removes stop words and stemming. Next, it get the value of the features. If the tweets after preprocessing has the feature word then the value for this feature is true. Lastly, it processes the dev-tweets file as train-tweets file and evaluates the model.
There is no input needed. And output will show the status of processing, the classifier name, accuracy, positive precision, positive recall, negative precision, negative recall, neutral precision, neutral recall. 
The number of the features can be changed in this code line. Now, it selected 1000 features.
bestwords = get_num_features(trainingfile,1000)

All the python should be run under the same folder with the text files.

Output

This output csv file contains all the predicted label for test-tweets file which is generated by Weka. The machine learning I use is K-NN and the value of k is set as 51.

